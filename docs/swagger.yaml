basePath: /api/v1
definitions:
  stats.Stats:
    properties:
      hostname:
        description: Hostname of the system
        type: string
      id:
        description: A unique identifier for the node (a hardware-bound ID is recommended)
        type: string
      model:
        description: The model/vendor of the system's hardware, useful for identification
        type: string
      providers:
        additionalProperties: true
        description: Extra, more in-depth information about the system as dynamically
          returned by providers.
        type: object
      uptime:
        description: Uptime of the system
        type: integer
    type: object
  types.AggregatedMeasurementRequest:
    properties:
      begin:
        description: Start time in milliseconds since epoch (Unix time)
        type: integer
      end:
        description: End time in milliseconds since epoch (Unix time)
        type: integer
      freqMax:
        description: Upper bound for frequency in Hz
        type: integer
      freqMin:
        description: Lower bound for frequency in Hz
        type: integer
      freqRes:
        description: Frequency resolution in Hz
        type: integer
      sensors:
        description: List of sensor hardware IDs to run the measurement campaign on
        items:
          type: string
        type: array
      timeRes:
        description: Time resolution in seconds
        type: integer
    type: object
info:
  contact:
    name: OpenRFSense
    url: https://github.com/openrfsense/backend/issues
  description: OpenRFSense backend API
  license:
    name: AGPLv3
    url: https://spdx.org/licenses/AGPL-3.0-or-later.html
  title: OpenRFSense backend API
paths:
  /nodes:
    get:
      description: Returns a list of all connected nodes by their hardware ID. Will
        time out in 300ms if any one of the nodes does not respond.
      produces:
      - application/json
      responses:
        "200":
          description: Bare statistics for all the running and connected nodes
          schema:
            items:
              $ref: '#/definitions/stats.Stats'
            type: array
        "500":
          description: When the internal timeout for information retrieval expires
      security:
      - BasicAuth: []
      summary: List nodes
      tags:
      - nodes
  /nodes/{id}/aggregated:
    post:
      description: Sends an aggregated measurement request to the nodes specified
        in `sensors` and returns a list of `stats.Stats` objects for all sensors taking
        part in the campaign. Will time out in `300ms` if any sensor does not respond.
      parameters:
      - description: Measurement request object
        in: body
        name: id
        required: true
        schema:
          $ref: '#/definitions/types.AggregatedMeasurementRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Bare statistics for all nodes in the measurement campaign
          schema:
            items:
              $ref: '#/definitions/stats.Stats'
            type: array
        "500":
          description: When the internal timeout for information retrieval expires
      security:
      - BasicAuth: []
      summary: Get an aggregated spectrum measurement from a list of nodes
      tags:
      - nodes
  /nodes/{id}/stats:
    get:
      description: Returns full stats from the node with given hardware ID. Will time
        out in `300ms` if the node does not respond.
      parameters:
      - description: Node hardware ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Full system statistics for the node associated to the given
            ID
          schema:
            $ref: '#/definitions/stats.Stats'
        "500":
          description: When the internal timeout for information retrieval expires
      security:
      - BasicAuth: []
      summary: Get stats from a node
      tags:
      - nodes
securityDefinitions:
  BasicAuth:
    type: basic
swagger: "2.0"
