basePath: /api/v1
definitions:
  database.Campaign:
    properties:
      begin:
        description: The time at which the campaign is supposed to start
        type: string
      campaignId:
        description: The textual, random ID for the campaign
        type: string
      createdAt:
        type: string
      deletedAt:
        type: string
      end:
        description: The time at which the campaign will end
        type: string
      sensors:
        description: The list of sensor partaking in the campaign
        items:
          type: string
        type: array
      type:
        description: The type of measurements requested
        type: string
      updatedAt:
        type: string
    type: object
  database.Sample:
    properties:
      campaignId:
        description: Unique identifier for the campaign this sample belongs to
        type: string
      config:
        $ref: '#/definitions/database.SampleConfig'
        description: Sensor configuration for the recorded data set
      createdAt:
        type: string
      data:
        description: Actual measurement data. Unit depends on measurement type
        items:
          type: number
        type: array
      deletedAt:
        type: string
      sampleType:
        description: Sample type string (IQ, PSD, DEC)
        type: string
      sensorId:
        description: The unique hardware id of the sensor
        type: string
      time:
        $ref: '#/definitions/database.SampleTime'
        description: Sample timestamp with microseconds precision
      updatedAt:
        type: string
    type: object
  database.SampleConfig:
    properties:
      antennaGain:
        description: Antenna gain in dBi
        type: number
      antennaId:
        description: Identifier for the antenna being used if device has multiple
          antennas
        type: integer
      centerFreq:
        description: Center frequency in Hz to which the RF front-end was tuned to
          while recording the associated spectrum data
        type: integer
      estNoiseFloor:
        description: Estimated noise floor in dB
        type: number
      extraConf:
        additionalProperties: true
        description: Extra configuration for arbitrary data
        type: object
      frequencyCorrectionFactor:
        description: Correction factor for center frequency in Hz. The correction
          is already applied to the center frequency (0.0 for no correction)
        type: number
      frontendGain:
        description: RF front-end gain in dB (-1 for automatic gain control)
        type: number
      hoppingStrategy:
        description: Hopping strategy  used to overcome the bandwidth limitations
          of the RF front-end (0:Sequential, 1:Random, 2:Similarity)
        type: integer
      iqBalanceCalibration:
        description: True if IQ samples are balanced
        type: boolean
      rfSync:
        description: 'Time synchronization of the radio frontend (0: none, 1: GPS,
          2: Reference Clock, 5: Other)'
        type: integer
      samplingRate:
        description: Sensor's sampling rate in samples per second
        type: integer
      sigStrengthCalibration:
        description: True if signal strength is calibrated
        type: boolean
      systemSync:
        description: 'Time synchronization of the system (0: none, 1: GPS, 2: Reference
          Clock, 3: NTP, 4: OpenSky, 5: Other)'
        type: string
    type: object
  database.SampleTime:
    properties:
      microseconds:
        description: Microseconds extension for the UNIX time stamp
        type: integer
      seconds:
        description: Number of seconds since the UNIX epoch start on January 1st,
          1970 at UTC
        type: integer
    type: object
  stats.Stats:
    properties:
      hostname:
        description: Hostname of the system
        type: string
      id:
        description: A unique identifier for the node (a hardware-bound ID is recommended)
        type: string
      model:
        description: The model/vendor of the system's hardware, useful for identification
        type: string
      providers:
        additionalProperties: true
        description: Extra, more in-depth information about the system as dynamically
          returned by providers.
        type: object
      uptime:
        description: Uptime of the system
        type: integer
    type: object
  types.AggregatedMeasurementRequest:
    properties:
      begin:
        description: Start time in Unix epoch (seconds elapsed since January 1, 1970
          UTC)
        type: integer
      campaignId:
        description: Campaign ID. For internal use only, will be ignored if not null
        type: string
      end:
        description: End time in Unix epoch (seconds elapsed since January 1, 1970
          UTC)
        type: integer
      freqMax:
        description: Upper bound for frequency in Hz
        type: integer
      freqMin:
        description: Lower bound for frequency in Hz
        type: integer
      freqRes:
        description: Frequency resolution in Hz
        type: integer
      sensors:
        description: List of sensor hardware IDs to run the measurement campaign on
        items:
          type: string
        type: array
      timeRes:
        description: Time resolution in seconds
        type: integer
    type: object
  types.RawMeasurementRequest:
    properties:
      begin:
        description: Start time in Unix epoch (seconds elapsed since January 1, 1970
          UTC)
        type: integer
      campaignId:
        description: Campaign ID. For internal use only, will be ignored if not null
        type: string
      end:
        description: End time in Unix epoch (seconds elapsed since January 1, 1970
          UTC)
        type: integer
      freqCenter:
        description: Center frequency for measurement
        type: integer
      sensors:
        description: List of sensor hardware IDs to run the measurement campaign on
        items:
          type: string
        type: array
    type: object
info:
  contact:
    name: OpenRFSense
    url: https://github.com/openrfsense/backend/issues
  description: OpenRFSense backend API
  license:
    name: AGPLv3
    url: https://spdx.org/licenses/AGPL-3.0-or-later.html
  title: OpenRFSense backend API
paths:
  /aggregated:
    post:
      description: Sends an aggregated measurement request to the nodes specified
        in `sensors` and returns a list of `stats.Stats` objects for all sensors taking
        part in the campaign. Will time out in `300ms` if any sensor does not respond.
      parameters:
      - description: Measurement request object
        in: body
        name: id
        required: true
        schema:
          $ref: '#/definitions/types.AggregatedMeasurementRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Bare statistics for all nodes in the measurement campaign.
            Will always include sensor status information.
          schema:
            items:
              $ref: '#/definitions/stats.Stats'
            type: array
        "500":
          description: When the internal timeout for information retrieval expires
      security:
      - BasicAuth: []
      summary: Get an aggregated spectrum measurement from a list of nodes
      tags:
      - measurement
  /campaigns:
    get:
      description: Returns a list of all recorded campaigns (that were successfully
        started).
      produces:
      - application/json
      responses:
        "200":
          description: All recorded campaigns
          schema:
            items:
              $ref: '#/definitions/database.Campaign'
            type: array
        "500":
          description: Generally a database error
      security:
      - BasicAuth: []
      summary: List campaigns
      tags:
      - data
  /campaigns/{campaign_id}:
    get:
      description: Returns the campaign object corresponding to the given unique ID.
      produces:
      - application/json
      responses:
        "200":
          description: The campaign with the given ID
          schema:
            $ref: '#/definitions/database.Campaign'
        "500":
          description: Generally a database error
      security:
      - BasicAuth: []
      summary: Get a single campaign object
      tags:
      - data
  /campaigns/{campaign_id}/samples:
    get:
      description: Returns a list of all the samples recorded during a campaign by
        the sensors partaking in said campaign.
      produces:
      - application/json
      responses:
        "200":
          description: All samples received during the campaign
          schema:
            items:
              $ref: '#/definitions/database.Sample'
            type: array
        "500":
          description: Generally a database error
      security:
      - BasicAuth: []
      summary: Get all samples recorded during a specific campaign
      tags:
      - data
  /nodes:
    get:
      description: Returns a list of all connected nodes by their hardware ID. Will
        time out in 300ms if any one of the nodes does not respond.
      produces:
      - application/json
      responses:
        "200":
          description: Bare statistics for all the running and connected nodes
          schema:
            items:
              $ref: '#/definitions/stats.Stats'
            type: array
        "500":
          description: When the internal timeout for information retrieval expires
      security:
      - BasicAuth: []
      summary: List nodes
      tags:
      - administration
  /nodes/{sensor_id}/campaigns:
    get:
      description: Returns all campaigns where the given sensor was requested to take
        part in.
      parameters:
      - description: Node hardware ID
        in: path
        name: sensor_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of campaign the sensor took part in
          schema:
            items:
              $ref: '#/definitions/database.Campaign'
            type: array
        "500":
          description: Generally a database error
      security:
      - BasicAuth: []
      summary: Get all campaigns a specific node took part in
      tags:
      - data
  /nodes/{sensor_id}/campaigns/{campaign_id}:
    get:
      description: Returns all samples received by the given sensor and belonging
        to the given campaign.
      parameters:
      - description: Node hardware ID
        in: path
        name: sensor_id
        required: true
        type: string
      - description: Campaign ID
        in: path
        name: campaign_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of samples received by the given sensor during the given
            campaign
          schema:
            items:
              $ref: '#/definitions/database.Sample'
            type: array
        "500":
          description: Generally a database error
      security:
      - BasicAuth: []
      summary: Get all samples received from a specific sensor and belonging to a
        specific campaign
      tags:
      - data
  /nodes/{sensor_id}/samples:
    get:
      description: Returns all samples received by the backend from the sensor with
        the given ID.
      parameters:
      - description: Node hardware ID
        in: path
        name: sensor_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of samples received by the given sensor
          schema:
            items:
              $ref: '#/definitions/database.Sample'
            type: array
        "500":
          description: Generally a database error
      security:
      - BasicAuth: []
      summary: Get all samples received from a specific node
      tags:
      - data
  /nodes/{sensor_id}/stats:
    get:
      description: Returns full stats from the node with given hardware ID. Will time
        out in `300ms` if the node does not respond.
      parameters:
      - description: Node hardware ID
        in: path
        name: sensor_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Full system statistics for the node associated to the given
            ID
          schema:
            $ref: '#/definitions/stats.Stats'
        "500":
          description: When the internal timeout for information retrieval expires
      security:
      - BasicAuth: []
      summary: Get stats from a node
      tags:
      - administration
  /raw:
    post:
      description: Sends a raw measurement request to the nodes specified in `sensors`
        and returns a list of `stats.Stats` objects for all sensors taking part in
        the campaign. Will time out in `300ms` if any sensor does not respond.
      parameters:
      - description: Measurement request object
        in: body
        name: id
        required: true
        schema:
          $ref: '#/definitions/types.RawMeasurementRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Bare statistics for all nodes in the measurement campaign.
            Will always include sensor status information.
          schema:
            items:
              $ref: '#/definitions/stats.Stats'
            type: array
        "500":
          description: When the internal timeout for information retrieval expires
      security:
      - BasicAuth: []
      summary: Get a raw spectrum measurement from a list of nodes
      tags:
      - measurement
securityDefinitions:
  BasicAuth:
    type: basic
swagger: "2.0"
