// Package docs GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "OpenRFSense",
            "url": "https://github.com/openrfsense/backend/issues"
        },
        "license": {
            "name": "AGPLv3",
            "url": "https://spdx.org/licenses/AGPL-3.0-or-later.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/nodes": {
            "get": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "description": "Returns a list of all connected nodes by their hardware ID. Will time out in 300ms if any one of the nodes does not respond.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "nodes"
                ],
                "summary": "List nodes",
                "responses": {
                    "200": {
                        "description": "Bare statistics for all the running and connected nodes",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/stats.Stats"
                            }
                        }
                    },
                    "500": {
                        "description": "When the internal timeout for information retrieval expires"
                    }
                }
            }
        },
        "/nodes/{id}/stats": {
            "get": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "description": "Returns full stats from the node with given hardware ID. Will time out in ` + "`" + `300ms` + "`" + ` if the node does not respond.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "nodes"
                ],
                "summary": "Get stats from a node",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Node hardware ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Full system statistics for the node associated to the given ID",
                        "schema": {
                            "$ref": "#/definitions/stats.Stats"
                        }
                    },
                    "500": {
                        "description": "When the internal timeout for information retrieval expires"
                    }
                }
            }
        }
    },
    "definitions": {
        "stats.Stats": {
            "type": "object",
            "properties": {
                "hostname": {
                    "description": "Hostname of the system",
                    "type": "string"
                },
                "id": {
                    "description": "A unique identifier for the node (a hardware-bound ID is recommended)",
                    "type": "string"
                },
                "model": {
                    "description": "The model/vendor of the system's hardware, useful for identification",
                    "type": "string"
                },
                "providers": {
                    "description": "Extra, more in-depth information about the system as dynamically returned by providers.",
                    "type": "object",
                    "additionalProperties": true
                },
                "uptime": {
                    "description": "Uptime of the system",
                    "type": "integer"
                }
            }
        }
    },
    "securityDefinitions": {
        "BasicAuth": {
            "type": "basic"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "/api/v1",
	Schemes:          []string{},
	Title:            "OpenRFSense backend API",
	Description:      "OpenRFSense backend API",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
